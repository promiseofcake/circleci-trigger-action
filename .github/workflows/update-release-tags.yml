name: Update release tags (v1/v2)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to point v<MAJOR> to (e.g., v1.2.3 or 2.3.4)'
        required: false

permissions:
  contents: write

jobs:
  update-floating:
    if: ${{ !github.event.release.prerelease }}
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository (full history for tags)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Update floating v<MAJOR> tag to this release
        env:
          INPUT_TAG: ${{ inputs.tag }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail

          # Prefer release tag; fallback to workflow_dispatch input
          TAG="${RELEASE_TAG:-${INPUT_TAG:-}}"

          # Optionally auto-detect latest stable v2.* then v1.* if no TAG provided
          if [[ -z "${TAG}" ]]; then
            TAG="$(git tag -l 'v2.*' --sort=-v:refname | head -n 1 || true)"
            if [[ -z "${TAG}" ]]; then
              TAG="$(git tag -l 'v1.*' --sort=-v:refname | head -n 1 || true)"
            fi
          fi

          if [[ -z "${TAG}" ]]; then
            echo "No tag provided and no suitable v1.* or v2.* tags found. Skipping."
            exit 0
          fi

          # Normalize to start with 'v'
          if [[ ! "$TAG" =~ ^v ]]; then TAG="v$TAG"; fi
          echo "Detected tag: $TAG"

          # Must be stable SemVer for major 1 or 2
          if ! echo "$TAG" | grep -Eq '^v(1|2)\.[0-9]+\.[0-9]+$'; then
            echo "Not a stable v1/v2 SemVer tag ($TAG). Skipping."
            exit 0
          fi

          # Extract MAJOR (1 or 2)
          MAJOR="$(echo "$TAG" | sed -E 's/^v([0-9]+)\..*/\1/')"
          FLOATING="v${MAJOR}"

          # Ensure the tag exists locally
          if ! git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG not found locally after fetch. Aborting."
            exit 1
          fi

          echo "Moving floating tag ${FLOATING} -> $TAG"
          git tag -fa "${FLOATING}" "$TAG" -m "${FLOATING} -> $TAG"
          git push origin "refs/tags/${FLOATING}" --force
